<?
 /**
  * 
  Name : project Tasks Class 
  by : YourColor.Net
  */
class Tasks {
    const POST_TYPE = 'tasks';
    const NOTIFICATION_TYPE = 'notification';
    const STATUS_PENDING = 'todo';
    const STATUS_COMPLETED = 'completed';
    const ASSIGNED_USERS_META_KEY = 'assignees';

    public function createTask($taskData) {
        if (empty($taskData['title'])) {
            throw new InvalidArgumentException('Task title is required.');
        }
        $taskData['post_type'] = self::POST_TYPE;
        $taskData['post_title'] = $taskData['title'];
        $taskData['post_content'] = $taskData['desc'];
        $taskData['post_status'] = 'publish';
        $taskData['post_author'] = get_current_user_id();
        $taskId = wp_insert_post($taskData);

        if (!$taskId) {
            throw new RuntimeException('Failed to create task.');
        }
        $this->setTaskMeta($taskId, 'created', get_current_user_id() ?? []);
        $this->setTaskMeta($taskId, 'assignees', $taskData['assignees'] ?? []);
        $this->setTaskMeta($taskId, 'parent_id', $taskData['parent_id'] ?? 0);
        $this->setTaskMeta($taskId, 'status', $taskData['status'] ?? self::STATUS_PENDING);
        $this->setTaskMeta($taskId, 'start_date', $taskData['start_date'] ?? '');
        $this->setTaskMeta($taskId, 'end_date', $taskData['end_date'] ?? '');
        $this->setTaskMeta($taskId, 'Priority', $taskData['Priority'] ?? '');
        $this->setTaskMeta($taskId, 'labels', $taskData['labels'] ?? []);
        $this->setTaskMeta($taskId, 'task_project', $taskData['task_project'] ?? []);
        $this->setTaskMeta($taskId, 'mindmap', $taskData['mindmap'] ?? '');

        return $taskId;
    }

    public function getTask($taskId) {
        if (!$taskId) {
            return false;
        }
        $taskData = [
            'id' => $taskId,
            'title' => get_the_title($taskId),
            'created_time' => get_the_date('l F j, Y', $taskId),
            'created_by' => get_post_meta($taskId, 'created', true) ?: '',
            'desc' => get_post($taskId)->post_content,
            'assignees' => get_post_meta($taskId, 'assignees', true) ?: [],
            'start_date' => get_post_meta($taskId, 'start_date', true) ?: get_the_date('l F j, Y', $taskId),
            'end_date' => get_post_meta($taskId, 'end_date', true) ?: '',
            'labels' => get_post_meta($taskId, 'labels', true) ?: [],
            'status' => get_post_meta($taskId, 'status', true) ?: self::STATUS_PENDING,
            'Priority' => get_post_meta($taskId, 'Priority', true) ?: '4',
            'mindmap' => get_post_meta($taskId, 'mindmap', true) ?: false,
            'task_project' => get_post_meta($taskId, 'task_project', true) ?: false,
        ];
        return $taskData;
    }    
    public function getNextTask($taskId) {
        $currentUserId = get_current_user_id();
        $tasks = get_posts(array(
            'post_type' => self::POST_TYPE,
            'meta_query' => array(
                'relation' => 'OR',
                array(
                    'key' => 'created',
                    'value' => $currentUserId,
                    'compare' => '=',
                ),
                array(
                    'key' => Self::ASSIGNED_USERS_META_KEY,
                    'value' => $currentUserId,
                    'compare' => 'in',
                ),
            ),
            'orderby' => 'meta_value',
            'meta_key' => 'end_date',
            'order' => 'ASC',
        ));
        $currentIndex = array_search($taskId, wp_list_pluck($tasks, 'ID'));
        if ($currentIndex !== false && isset($tasks[$currentIndex + 1])) {
            return $this->getTask($tasks[$currentIndex + 1]->ID);
        }
        return null;
    }

    public function getPrevTask($taskId) {
        $currentUserId = get_current_user_id();
        $tasks = get_posts(array(
            'post_type' => self::POST_TYPE,
            'meta_query' => array(
                'relation' => 'OR',
                array(
                    'key' => 'created',
                    'value' => $currentUserId,
                    'compare' => '=',
                ),
                array(
                    'key' => Self::ASSIGNED_USERS_META_KEY,
                    'value' => $currentUserId,
                    'compare' => 'in',
                ),
            ),
            'orderby' => 'meta_value',
            'meta_key' => 'end_date',
            'order' => 'ASC',
        ));
        $currentIndex = array_search($taskId, wp_list_pluck($tasks, 'ID'));
        if ($currentIndex !== false && isset($tasks[$currentIndex - 1])) {
            return $this->getTask($tasks[$currentIndex - 1]->ID);
        }
        return null;
    }
    public function getTask_by_status($status) {
        if (!$status) {
            return false;
        }
        $args = [
		'post_type'=>'tasks','fields'=>'ids','meta_query' => [
		   [
		       'key' => 'status',
		       'value' => $status,
		       'compare' => '=',
		   ]
		]];
        $tasks = get_posts($args);
        return $tasks;
    }  
    public function getTask_by_Priority($status) {
        if (!$status) {
            return false;
        }
        $args = [
        'post_type'=>'tasks','fields'=>'ids','meta_query' => [
           [
               'key' => 'Priority',
               'value' => $status,
               'compare' => 'In',
           ]
        ]];
        $tasks = get_posts($args);
        return $tasks;
    }     
    public function gettasks() {
    
        $args = [
        'post_type'=>'tasks','fields'=>'ids','posts_per_page'=>-1];
        $tasks = get_posts($args);
        return $tasks;
    }    
    public function getTask_by_assignees($status) {
        if (!$status) {
            return false;
        }
        $args = [
        'post_type'=>'tasks','fields'=>'ids','meta_query' => [
           [
               'key' => 'assignees',
               'value' => $status,
               'compare' => 'In',
           ]
        ]];
        $tasks = get_posts($args);
        return $tasks;
    } 
    public function getTask_Is_Mindemap() {

        $args = [
        'post_type'=>'tasks','fields'=>'ids','meta_query' => [
           [
               'key' => 'mindmap',
               'value' => true,
           ]
        ]];
        $tasks = get_posts($args);
        return $tasks;
    }
    public function is_user_assigned($task_id, $user_id) {
        $assigned_users = $this->get_assigned_users($task_id);
        return in_array($user_id, $assigned_users);
    }
    public function get_assigned_users($task_id) {
      $assigned_users = get_post_meta($task_id, self::ASSIGNED_USERS_META_KEY, true);
      if (!is_array($assigned_users)) {
          $assigned_users = array();
      }
      return $assigned_users;
    }
    public function assign_user_by_id($task_id, $user_id) {
        $assigned_users = $this->get_assigned_users($task_id);
        if (!in_array($user_id, $assigned_users)) {
            $assigned_users[] = $user_id;
        } else {
            $assigned_users = array_diff($assigned_users, array($user_id));
        }
        update_post_meta($task_id, self::ASSIGNED_USERS_META_KEY, $assigned_users);
        $task = $this->getTask($task_id);
        $message = 'You have been assigned to a new task: ' . $task['title'];
        $this->send_notification(array($user_id), $message);
        return true;
    }
    public function getSubtasks($taskId) {
        $subtaskArgs = [
            'post_type' => self::POST_TYPE,
            'post_parent' => $taskId,
        ];

        $subtaskPosts = get_posts($subtaskArgs);
        $subtasks = [];

        foreach ($subtaskPosts as $subtaskPost) {
            $subtaskData = $this->getTask($subtaskPost->ID);
            if ($subtaskData) {
                array_push($subtasks, $subtaskData);
            }
        }

        return $subtasks;
    }

    public function createSubtask($subtaskData) {
        if (empty($subtaskData['task_id']) || !is_int($subtaskData['task_id'])) {
            throw new InvalidArgumentException('Parent task ID is required.');
        }
        if (empty($subtaskData['title'])) {
            throw new InvalidArgumentException('Subtask title is required.');
        }

        $subtaskData['post_type'] = self::POST_TYPE;
        $subtaskData['post_status'] = 'publish';
        $subtaskData['post_parent'] = $subtaskData['task_id'];
        $subtaskData['post_author'] = get_current_user_id();

        $subtaskId = wp_insert_post($subtaskData);

        if (!$subtaskId) {
            throw new RuntimeException('Failed to create subtask.');
        }

        $this->setTaskMeta($subtaskId, 'assignees', $subtaskData['assignees'] ?? []);
        $this->setTaskMeta($subtaskId, 'start_date', $subtaskData['startDate'] ?? '');
        $this->setTaskMeta($subtaskId, 'end_date', $subtaskData['endDate'] ?? '');
        $this->setTaskMeta($subtaskId, 'labels', $subtaskData['labels'] ?? []);
        $this->setTaskMeta($subtaskId, 'status', $subtaskData['status'] ?? self::STATUS_PENDING);

        $subtask = $this->getTask($subtaskId);

        if (!$subtask) {
            throw new RuntimeException('Failed to retrieve subtask data.');
        }

        return $subtask;
    }

    public function updateTask($taskId, $updateData) {
        if (empty($updateData) || !is_array($updateData)) {
            throw new InvalidArgumentException('Update data must be a non-empty array.');
        }
        $task = ge_post($taskId);
        if (!$task || $task->post_type !== self::POST_TYPE) {
            throw new InvalidArgumentException('Invalid task ID.');
        }

        if (!empty($updateData['title'])) {
            $task->post_title = $updateData['title'];
            wp_update_post($task);
        }
        if (!empty($updateData['desc'])) {
            $this->setTaskMeta($taskId, 'taskDesc', $updateData['desc']);
        }
        if (!empty($updateData['assignees'])) {
            $this->setTaskMeta($taskId, 'assignees', $updateData['assignees']);
        }
        if (!empty($updateData['start_date'])) {
            $this->setTaskMeta($taskId, 'start_date', $updateData['start_date']);
        }
        if (!empty($updateData['end_date'])) {
            $this->setTaskMeta($taskId, 'end_date', $updateData['end_date']);
        }
        if (!empty($updateData['labels'])) {
            $this->setTaskMeta($taskId, 'labels', $updateData['labels']);
        }
        if (!empty($updateData['status'])) {
            $this->setTaskMeta($taskId, 'status', $updateData['status']);
        }

        return true;
    }

    public function deleteTask($taskId) {
        $task = get_post($taskId);

        if (!$task || $task->post_type !== self::POST_TYPE) {
            throw new InvalidArgumentException('Invalid task ID.');
        }

        $taskType = $this->getTaskType($taskId);

        if ($taskType === 'subtask') {
            $result = wp_delete_post($taskId, true);
        } else {
            $subtasks = get_children([
                'post_parent' => $taskId,
                'post_type' => self::POST_TYPE,
            ]);

            foreach ($subtasks as $subtask) {
                wp_delete_post($subtask->ID, true);
            }

            $result = wp_delete_post($taskId, true);
       }
   	}
    public function deleteTaskMeta($taskId, $metaKey) {
        if (empty($metaKey)) {
            throw new InvalidArgumentException('Meta key cannot be empty.');
        }
        delete_post_meta($taskId, $metaKey);
    }

    public function getTaskType($taskId) {
        $task = get_post($taskId);
        if (!$task) {
            throw new InvalidArgumentException('Invalid task ID.');
        }

        if ($task->post_parent) {
            return 'subtask';
        } else {
            return 'task';
        }
    }
    public function setTaskMeta($taskId, $metaKey, $metaValue) {
	    if (empty($metaKey)) {
	        throw new InvalidArgumentException('Meta key cannot be empty.');
	    }

	    if (is_array($metaValue)) {
	        $metaValue = array_filter($metaValue);
	    }
	    update_post_meta($taskId, $metaKey, $metaValue);
	}
    public function assignTask($taskId, $assignees) {
	    if (empty($assignees) || !is_array($assignees)) {
	        throw new InvalidArgumentException('Assignees must be a non-empty array.');
	    }
	    $task = get_post($taskId);

	    if (!$task || $task->post_type !== self::POST_TYPE) {
	        throw new InvalidArgumentException('Invalid task ID.');
	    }

	    $this->setTaskMeta($taskId, 'assignees', $assignees);

	    return true;
	}
	public function add_status( $status ) {
        $statuses = $this->get_tasks_status();
        $statuses[] = $status;
        $this->set_statuses( $statuses );
    }

    public function update_status( $old_status, $new_status ) {
        $statuses = $this->get_tasks_status();
        $key = array_search( $old_status, $statuses );
        if ( $key !== false ) {
            $statuses[ $key ] = $new_status;
            $this->set_statuses( $statuses );
         }
 	}
    public function delete_status( $status ) {
        $statuses = $this->get_tasks_status();
        $key = array_search( $status, $statuses );
        if ( $key !== false ) {
            unset( $statuses[ $key ] );
            $this->set_statuses( $statuses );
        }
    }
    private function Defult_statuses() {
    	$Defult_statuses = [];
    	$Defult_statuses['todo']=[
    		'name'=>'todo',
    		'color'=>'#d3d3d3',
    		'order'=>0,
    	];
    	$Defult_statuses['inprogress']=[
    		'name'=>'inprogress',
    		'color'=>'#fd9800',
    		'order'=>0,
    	];
    	$Defult_statuses['completed']=[
    		'name'=>'completed',
    		'color'=>'#40b5b5',
    		'order'=>0,
    	];
    	return $Defult_statuses ;
    } 
    public function Priorities() {
        $Priority = array(
            [
            "name" => "عاجل",
            "color" => "#FF0000"
            ], 
            [
            "name" => "مهم",
             "color" => "#0000FF"
            ], 
            [
            "name" => "متوسط  ",
             "color" => "#FFA500"
            ], 
            [
            "name" => "طبيعي ",
             "color" => "#40b5b5"
            ], 
            [
            "name" => "قليل ",
             "color" => "#808080"
            ], 
        );
        return $Priority ;
    } 
    public function get_tasks_status(){
    	$userID = wp_get_current_user()->ID;
    	$tasks_status = get_user_meta($userID,'tasks_status',1);
    	if(empty($tasks_status)){
    		$tasks_status = $this->Defult_statuses();
    		update_user_meta( $userID,'tasks_status', $tasks_status);
    	}
    	return $tasks_status ;
    }
    public function send_notification($user_ids,$message) {
      $title = __('New Notification');
      $args = array(
          'post_title' => $title,
          'post_content' => $message,
          'post_status' => 'publish',
          'post_type' => self::NOTIFICATION_TYPE
      );

      $notification_id = wp_insert_post($args);
      if (!$notification_id) {
          return false;
      }

      foreach ($user_ids as $user_id) {
          add_post_meta($notification_id,'_notification_users', $user_id);
      }

      return true;
    }
}

